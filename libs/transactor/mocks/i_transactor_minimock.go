package mocks

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

//go:generate minimock -i route256/libs/transactor.ITransactor -o ./mocks/i_transactor_minimock.go -n ITransactorMock

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// ITransactorMock implements transactor.ITransactor
type ITransactorMock struct {
	t minimock.Tester

	funcRunRepeatableRead          func(ctx context.Context, fx func(ctxTX context.Context) error) (err error)
	inspectFuncRunRepeatableRead   func(ctx context.Context, fx func(ctxTX context.Context) error)
	afterRunRepeatableReadCounter  uint64
	beforeRunRepeatableReadCounter uint64
	RunRepeatableReadMock          mITransactorMockRunRepeatableRead
}

// NewITransactorMock returns a mock for transactor.ITransactor
func NewITransactorMock(t minimock.Tester) *ITransactorMock {
	m := &ITransactorMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.RunRepeatableReadMock = mITransactorMockRunRepeatableRead{mock: m}
	m.RunRepeatableReadMock.callArgs = []*ITransactorMockRunRepeatableReadParams{}

	return m
}

type mITransactorMockRunRepeatableRead struct {
	mock               *ITransactorMock
	defaultExpectation *ITransactorMockRunRepeatableReadExpectation
	expectations       []*ITransactorMockRunRepeatableReadExpectation

	callArgs []*ITransactorMockRunRepeatableReadParams
	mutex    sync.RWMutex
}

// ITransactorMockRunRepeatableReadExpectation specifies expectation struct of the ITransactor.RunRepeatableRead
type ITransactorMockRunRepeatableReadExpectation struct {
	mock    *ITransactorMock
	params  *ITransactorMockRunRepeatableReadParams
	results *ITransactorMockRunRepeatableReadResults
	Counter uint64
}

// ITransactorMockRunRepeatableReadParams contains parameters of the ITransactor.RunRepeatableRead
type ITransactorMockRunRepeatableReadParams struct {
	ctx context.Context
	fx  func(ctxTX context.Context) error
}

// ITransactorMockRunRepeatableReadResults contains results of the ITransactor.RunRepeatableRead
type ITransactorMockRunRepeatableReadResults struct {
	err error
}

// Expect sets up expected params for ITransactor.RunRepeatableRead
func (mmRunRepeatableRead *mITransactorMockRunRepeatableRead) Expect(ctx context.Context, fx func(ctxTX context.Context) error) *mITransactorMockRunRepeatableRead {
	if mmRunRepeatableRead.mock.funcRunRepeatableRead != nil {
		mmRunRepeatableRead.mock.t.Fatalf("ITransactorMock.RunRepeatableRead mock is already set by Set")
	}

	if mmRunRepeatableRead.defaultExpectation == nil {
		mmRunRepeatableRead.defaultExpectation = &ITransactorMockRunRepeatableReadExpectation{}
	}

	mmRunRepeatableRead.defaultExpectation.params = &ITransactorMockRunRepeatableReadParams{ctx, fx}
	for _, e := range mmRunRepeatableRead.expectations {
		if minimock.Equal(e.params, mmRunRepeatableRead.defaultExpectation.params) {
			mmRunRepeatableRead.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmRunRepeatableRead.defaultExpectation.params)
		}
	}

	return mmRunRepeatableRead
}

// Inspect accepts an inspector function that has same arguments as the ITransactor.RunRepeatableRead
func (mmRunRepeatableRead *mITransactorMockRunRepeatableRead) Inspect(f func(ctx context.Context, fx func(ctxTX context.Context) error)) *mITransactorMockRunRepeatableRead {
	if mmRunRepeatableRead.mock.inspectFuncRunRepeatableRead != nil {
		mmRunRepeatableRead.mock.t.Fatalf("Inspect function is already set for ITransactorMock.RunRepeatableRead")
	}

	mmRunRepeatableRead.mock.inspectFuncRunRepeatableRead = f

	return mmRunRepeatableRead
}

// Return sets up results that will be returned by ITransactor.RunRepeatableRead
func (mmRunRepeatableRead *mITransactorMockRunRepeatableRead) Return(err error) *ITransactorMock {
	if mmRunRepeatableRead.mock.funcRunRepeatableRead != nil {
		mmRunRepeatableRead.mock.t.Fatalf("ITransactorMock.RunRepeatableRead mock is already set by Set")
	}

	if mmRunRepeatableRead.defaultExpectation == nil {
		mmRunRepeatableRead.defaultExpectation = &ITransactorMockRunRepeatableReadExpectation{mock: mmRunRepeatableRead.mock}
	}
	mmRunRepeatableRead.defaultExpectation.results = &ITransactorMockRunRepeatableReadResults{err}
	return mmRunRepeatableRead.mock
}

// Set uses given function f to mock the ITransactor.RunRepeatableRead method
func (mmRunRepeatableRead *mITransactorMockRunRepeatableRead) Set(f func(ctx context.Context, fx func(ctxTX context.Context) error) (err error)) *ITransactorMock {
	if mmRunRepeatableRead.defaultExpectation != nil {
		mmRunRepeatableRead.mock.t.Fatalf("Default expectation is already set for the ITransactor.RunRepeatableRead method")
	}

	if len(mmRunRepeatableRead.expectations) > 0 {
		mmRunRepeatableRead.mock.t.Fatalf("Some expectations are already set for the ITransactor.RunRepeatableRead method")
	}

	mmRunRepeatableRead.mock.funcRunRepeatableRead = f
	return mmRunRepeatableRead.mock
}

// When sets expectation for the ITransactor.RunRepeatableRead which will trigger the result defined by the following
// Then helper
func (mmRunRepeatableRead *mITransactorMockRunRepeatableRead) When(ctx context.Context, fx func(ctxTX context.Context) error) *ITransactorMockRunRepeatableReadExpectation {
	if mmRunRepeatableRead.mock.funcRunRepeatableRead != nil {
		mmRunRepeatableRead.mock.t.Fatalf("ITransactorMock.RunRepeatableRead mock is already set by Set")
	}

	expectation := &ITransactorMockRunRepeatableReadExpectation{
		mock:   mmRunRepeatableRead.mock,
		params: &ITransactorMockRunRepeatableReadParams{ctx, fx},
	}
	mmRunRepeatableRead.expectations = append(mmRunRepeatableRead.expectations, expectation)
	return expectation
}

// Then sets up ITransactor.RunRepeatableRead return parameters for the expectation previously defined by the When method
func (e *ITransactorMockRunRepeatableReadExpectation) Then(err error) *ITransactorMock {
	e.results = &ITransactorMockRunRepeatableReadResults{err}
	return e.mock
}

// RunRepeatableRead implements transactor.ITransactor
func (mmRunRepeatableRead *ITransactorMock) RunRepeatableRead(ctx context.Context, fx func(ctxTX context.Context) error) (err error) {
	mm_atomic.AddUint64(&mmRunRepeatableRead.beforeRunRepeatableReadCounter, 1)
	defer mm_atomic.AddUint64(&mmRunRepeatableRead.afterRunRepeatableReadCounter, 1)

	if mmRunRepeatableRead.inspectFuncRunRepeatableRead != nil {
		mmRunRepeatableRead.inspectFuncRunRepeatableRead(ctx, fx)
	}

	mm_params := &ITransactorMockRunRepeatableReadParams{ctx, fx}

	// Record call args
	mmRunRepeatableRead.RunRepeatableReadMock.mutex.Lock()
	mmRunRepeatableRead.RunRepeatableReadMock.callArgs = append(mmRunRepeatableRead.RunRepeatableReadMock.callArgs, mm_params)
	mmRunRepeatableRead.RunRepeatableReadMock.mutex.Unlock()

	for _, e := range mmRunRepeatableRead.RunRepeatableReadMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmRunRepeatableRead.RunRepeatableReadMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmRunRepeatableRead.RunRepeatableReadMock.defaultExpectation.Counter, 1)
		mm_want := mmRunRepeatableRead.RunRepeatableReadMock.defaultExpectation.params
		mm_got := ITransactorMockRunRepeatableReadParams{ctx, fx}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmRunRepeatableRead.t.Errorf("ITransactorMock.RunRepeatableRead got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmRunRepeatableRead.RunRepeatableReadMock.defaultExpectation.results
		if mm_results == nil {
			mmRunRepeatableRead.t.Fatal("No results are set for the ITransactorMock.RunRepeatableRead")
		}
		return (*mm_results).err
	}
	if mmRunRepeatableRead.funcRunRepeatableRead != nil {
		return mmRunRepeatableRead.funcRunRepeatableRead(ctx, fx)
	}
	mmRunRepeatableRead.t.Fatalf("Unexpected call to ITransactorMock.RunRepeatableRead. %v %v", ctx, fx)
	return
}

// RunRepeatableReadAfterCounter returns a count of finished ITransactorMock.RunRepeatableRead invocations
func (mmRunRepeatableRead *ITransactorMock) RunRepeatableReadAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmRunRepeatableRead.afterRunRepeatableReadCounter)
}

// RunRepeatableReadBeforeCounter returns a count of ITransactorMock.RunRepeatableRead invocations
func (mmRunRepeatableRead *ITransactorMock) RunRepeatableReadBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmRunRepeatableRead.beforeRunRepeatableReadCounter)
}

// Calls returns a list of arguments used in each call to ITransactorMock.RunRepeatableRead.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmRunRepeatableRead *mITransactorMockRunRepeatableRead) Calls() []*ITransactorMockRunRepeatableReadParams {
	mmRunRepeatableRead.mutex.RLock()

	argCopy := make([]*ITransactorMockRunRepeatableReadParams, len(mmRunRepeatableRead.callArgs))
	copy(argCopy, mmRunRepeatableRead.callArgs)

	mmRunRepeatableRead.mutex.RUnlock()

	return argCopy
}

// MinimockRunRepeatableReadDone returns true if the count of the RunRepeatableRead invocations corresponds
// the number of defined expectations
func (m *ITransactorMock) MinimockRunRepeatableReadDone() bool {
	for _, e := range m.RunRepeatableReadMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.RunRepeatableReadMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterRunRepeatableReadCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcRunRepeatableRead != nil && mm_atomic.LoadUint64(&m.afterRunRepeatableReadCounter) < 1 {
		return false
	}
	return true
}

// MinimockRunRepeatableReadInspect logs each unmet expectation
func (m *ITransactorMock) MinimockRunRepeatableReadInspect() {
	for _, e := range m.RunRepeatableReadMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ITransactorMock.RunRepeatableRead with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.RunRepeatableReadMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterRunRepeatableReadCounter) < 1 {
		if m.RunRepeatableReadMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to ITransactorMock.RunRepeatableRead")
		} else {
			m.t.Errorf("Expected call to ITransactorMock.RunRepeatableRead with params: %#v", *m.RunRepeatableReadMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcRunRepeatableRead != nil && mm_atomic.LoadUint64(&m.afterRunRepeatableReadCounter) < 1 {
		m.t.Error("Expected call to ITransactorMock.RunRepeatableRead")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *ITransactorMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockRunRepeatableReadInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *ITransactorMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *ITransactorMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockRunRepeatableReadDone()
}
