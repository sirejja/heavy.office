package mocks

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

//go:generate minimock -i route256/libs/transactor.IQueryEngine -o ./mocks/i_query_engine_minimock.go -n IQueryEngineMock

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	"github.com/jackc/pgconn"
	"github.com/jackc/pgx/v4"
)

// IQueryEngineMock implements transactor.IQueryEngine
type IQueryEngineMock struct {
	t minimock.Tester

	funcBeginTx          func(ctx context.Context, txOptions pgx.TxOptions) (t1 pgx.Tx, err error)
	inspectFuncBeginTx   func(ctx context.Context, txOptions pgx.TxOptions)
	afterBeginTxCounter  uint64
	beforeBeginTxCounter uint64
	BeginTxMock          mIQueryEngineMockBeginTx

	funcExec          func(ctx context.Context, sql string, arguments ...interface{}) (c2 pgconn.CommandTag, err error)
	inspectFuncExec   func(ctx context.Context, sql string, arguments ...interface{})
	afterExecCounter  uint64
	beforeExecCounter uint64
	ExecMock          mIQueryEngineMockExec

	funcQuery          func(ctx context.Context, query string, args ...interface{}) (r1 pgx.Rows, err error)
	inspectFuncQuery   func(ctx context.Context, query string, args ...interface{})
	afterQueryCounter  uint64
	beforeQueryCounter uint64
	QueryMock          mIQueryEngineMockQuery
}

// NewIQueryEngineMock returns a mock for transactor.IQueryEngine
func NewIQueryEngineMock(t minimock.Tester) *IQueryEngineMock {
	m := &IQueryEngineMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.BeginTxMock = mIQueryEngineMockBeginTx{mock: m}
	m.BeginTxMock.callArgs = []*IQueryEngineMockBeginTxParams{}

	m.ExecMock = mIQueryEngineMockExec{mock: m}
	m.ExecMock.callArgs = []*IQueryEngineMockExecParams{}

	m.QueryMock = mIQueryEngineMockQuery{mock: m}
	m.QueryMock.callArgs = []*IQueryEngineMockQueryParams{}

	return m
}

type mIQueryEngineMockBeginTx struct {
	mock               *IQueryEngineMock
	defaultExpectation *IQueryEngineMockBeginTxExpectation
	expectations       []*IQueryEngineMockBeginTxExpectation

	callArgs []*IQueryEngineMockBeginTxParams
	mutex    sync.RWMutex
}

// IQueryEngineMockBeginTxExpectation specifies expectation struct of the IQueryEngine.BeginTx
type IQueryEngineMockBeginTxExpectation struct {
	mock    *IQueryEngineMock
	params  *IQueryEngineMockBeginTxParams
	results *IQueryEngineMockBeginTxResults
	Counter uint64
}

// IQueryEngineMockBeginTxParams contains parameters of the IQueryEngine.BeginTx
type IQueryEngineMockBeginTxParams struct {
	ctx       context.Context
	txOptions pgx.TxOptions
}

// IQueryEngineMockBeginTxResults contains results of the IQueryEngine.BeginTx
type IQueryEngineMockBeginTxResults struct {
	t1  pgx.Tx
	err error
}

// Expect sets up expected params for IQueryEngine.BeginTx
func (mmBeginTx *mIQueryEngineMockBeginTx) Expect(ctx context.Context, txOptions pgx.TxOptions) *mIQueryEngineMockBeginTx {
	if mmBeginTx.mock.funcBeginTx != nil {
		mmBeginTx.mock.t.Fatalf("IQueryEngineMock.BeginTx mock is already set by Set")
	}

	if mmBeginTx.defaultExpectation == nil {
		mmBeginTx.defaultExpectation = &IQueryEngineMockBeginTxExpectation{}
	}

	mmBeginTx.defaultExpectation.params = &IQueryEngineMockBeginTxParams{ctx, txOptions}
	for _, e := range mmBeginTx.expectations {
		if minimock.Equal(e.params, mmBeginTx.defaultExpectation.params) {
			mmBeginTx.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmBeginTx.defaultExpectation.params)
		}
	}

	return mmBeginTx
}

// Inspect accepts an inspector function that has same arguments as the IQueryEngine.BeginTx
func (mmBeginTx *mIQueryEngineMockBeginTx) Inspect(f func(ctx context.Context, txOptions pgx.TxOptions)) *mIQueryEngineMockBeginTx {
	if mmBeginTx.mock.inspectFuncBeginTx != nil {
		mmBeginTx.mock.t.Fatalf("Inspect function is already set for IQueryEngineMock.BeginTx")
	}

	mmBeginTx.mock.inspectFuncBeginTx = f

	return mmBeginTx
}

// Return sets up results that will be returned by IQueryEngine.BeginTx
func (mmBeginTx *mIQueryEngineMockBeginTx) Return(t1 pgx.Tx, err error) *IQueryEngineMock {
	if mmBeginTx.mock.funcBeginTx != nil {
		mmBeginTx.mock.t.Fatalf("IQueryEngineMock.BeginTx mock is already set by Set")
	}

	if mmBeginTx.defaultExpectation == nil {
		mmBeginTx.defaultExpectation = &IQueryEngineMockBeginTxExpectation{mock: mmBeginTx.mock}
	}
	mmBeginTx.defaultExpectation.results = &IQueryEngineMockBeginTxResults{t1, err}
	return mmBeginTx.mock
}

// Set uses given function f to mock the IQueryEngine.BeginTx method
func (mmBeginTx *mIQueryEngineMockBeginTx) Set(f func(ctx context.Context, txOptions pgx.TxOptions) (t1 pgx.Tx, err error)) *IQueryEngineMock {
	if mmBeginTx.defaultExpectation != nil {
		mmBeginTx.mock.t.Fatalf("Default expectation is already set for the IQueryEngine.BeginTx method")
	}

	if len(mmBeginTx.expectations) > 0 {
		mmBeginTx.mock.t.Fatalf("Some expectations are already set for the IQueryEngine.BeginTx method")
	}

	mmBeginTx.mock.funcBeginTx = f
	return mmBeginTx.mock
}

// When sets expectation for the IQueryEngine.BeginTx which will trigger the result defined by the following
// Then helper
func (mmBeginTx *mIQueryEngineMockBeginTx) When(ctx context.Context, txOptions pgx.TxOptions) *IQueryEngineMockBeginTxExpectation {
	if mmBeginTx.mock.funcBeginTx != nil {
		mmBeginTx.mock.t.Fatalf("IQueryEngineMock.BeginTx mock is already set by Set")
	}

	expectation := &IQueryEngineMockBeginTxExpectation{
		mock:   mmBeginTx.mock,
		params: &IQueryEngineMockBeginTxParams{ctx, txOptions},
	}
	mmBeginTx.expectations = append(mmBeginTx.expectations, expectation)
	return expectation
}

// Then sets up IQueryEngine.BeginTx return parameters for the expectation previously defined by the When method
func (e *IQueryEngineMockBeginTxExpectation) Then(t1 pgx.Tx, err error) *IQueryEngineMock {
	e.results = &IQueryEngineMockBeginTxResults{t1, err}
	return e.mock
}

// BeginTx implements transactor.IQueryEngine
func (mmBeginTx *IQueryEngineMock) BeginTx(ctx context.Context, txOptions pgx.TxOptions) (t1 pgx.Tx, err error) {
	mm_atomic.AddUint64(&mmBeginTx.beforeBeginTxCounter, 1)
	defer mm_atomic.AddUint64(&mmBeginTx.afterBeginTxCounter, 1)

	if mmBeginTx.inspectFuncBeginTx != nil {
		mmBeginTx.inspectFuncBeginTx(ctx, txOptions)
	}

	mm_params := &IQueryEngineMockBeginTxParams{ctx, txOptions}

	// Record call args
	mmBeginTx.BeginTxMock.mutex.Lock()
	mmBeginTx.BeginTxMock.callArgs = append(mmBeginTx.BeginTxMock.callArgs, mm_params)
	mmBeginTx.BeginTxMock.mutex.Unlock()

	for _, e := range mmBeginTx.BeginTxMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.t1, e.results.err
		}
	}

	if mmBeginTx.BeginTxMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmBeginTx.BeginTxMock.defaultExpectation.Counter, 1)
		mm_want := mmBeginTx.BeginTxMock.defaultExpectation.params
		mm_got := IQueryEngineMockBeginTxParams{ctx, txOptions}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmBeginTx.t.Errorf("IQueryEngineMock.BeginTx got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmBeginTx.BeginTxMock.defaultExpectation.results
		if mm_results == nil {
			mmBeginTx.t.Fatal("No results are set for the IQueryEngineMock.BeginTx")
		}
		return (*mm_results).t1, (*mm_results).err
	}
	if mmBeginTx.funcBeginTx != nil {
		return mmBeginTx.funcBeginTx(ctx, txOptions)
	}
	mmBeginTx.t.Fatalf("Unexpected call to IQueryEngineMock.BeginTx. %v %v", ctx, txOptions)
	return
}

// BeginTxAfterCounter returns a count of finished IQueryEngineMock.BeginTx invocations
func (mmBeginTx *IQueryEngineMock) BeginTxAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmBeginTx.afterBeginTxCounter)
}

// BeginTxBeforeCounter returns a count of IQueryEngineMock.BeginTx invocations
func (mmBeginTx *IQueryEngineMock) BeginTxBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmBeginTx.beforeBeginTxCounter)
}

// Calls returns a list of arguments used in each call to IQueryEngineMock.BeginTx.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmBeginTx *mIQueryEngineMockBeginTx) Calls() []*IQueryEngineMockBeginTxParams {
	mmBeginTx.mutex.RLock()

	argCopy := make([]*IQueryEngineMockBeginTxParams, len(mmBeginTx.callArgs))
	copy(argCopy, mmBeginTx.callArgs)

	mmBeginTx.mutex.RUnlock()

	return argCopy
}

// MinimockBeginTxDone returns true if the count of the BeginTx invocations corresponds
// the number of defined expectations
func (m *IQueryEngineMock) MinimockBeginTxDone() bool {
	for _, e := range m.BeginTxMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.BeginTxMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterBeginTxCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcBeginTx != nil && mm_atomic.LoadUint64(&m.afterBeginTxCounter) < 1 {
		return false
	}
	return true
}

// MinimockBeginTxInspect logs each unmet expectation
func (m *IQueryEngineMock) MinimockBeginTxInspect() {
	for _, e := range m.BeginTxMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to IQueryEngineMock.BeginTx with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.BeginTxMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterBeginTxCounter) < 1 {
		if m.BeginTxMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to IQueryEngineMock.BeginTx")
		} else {
			m.t.Errorf("Expected call to IQueryEngineMock.BeginTx with params: %#v", *m.BeginTxMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcBeginTx != nil && mm_atomic.LoadUint64(&m.afterBeginTxCounter) < 1 {
		m.t.Error("Expected call to IQueryEngineMock.BeginTx")
	}
}

type mIQueryEngineMockExec struct {
	mock               *IQueryEngineMock
	defaultExpectation *IQueryEngineMockExecExpectation
	expectations       []*IQueryEngineMockExecExpectation

	callArgs []*IQueryEngineMockExecParams
	mutex    sync.RWMutex
}

// IQueryEngineMockExecExpectation specifies expectation struct of the IQueryEngine.Exec
type IQueryEngineMockExecExpectation struct {
	mock    *IQueryEngineMock
	params  *IQueryEngineMockExecParams
	results *IQueryEngineMockExecResults
	Counter uint64
}

// IQueryEngineMockExecParams contains parameters of the IQueryEngine.Exec
type IQueryEngineMockExecParams struct {
	ctx       context.Context
	sql       string
	arguments []interface{}
}

// IQueryEngineMockExecResults contains results of the IQueryEngine.Exec
type IQueryEngineMockExecResults struct {
	c2  pgconn.CommandTag
	err error
}

// Expect sets up expected params for IQueryEngine.Exec
func (mmExec *mIQueryEngineMockExec) Expect(ctx context.Context, sql string, arguments ...interface{}) *mIQueryEngineMockExec {
	if mmExec.mock.funcExec != nil {
		mmExec.mock.t.Fatalf("IQueryEngineMock.Exec mock is already set by Set")
	}

	if mmExec.defaultExpectation == nil {
		mmExec.defaultExpectation = &IQueryEngineMockExecExpectation{}
	}

	mmExec.defaultExpectation.params = &IQueryEngineMockExecParams{ctx, sql, arguments}
	for _, e := range mmExec.expectations {
		if minimock.Equal(e.params, mmExec.defaultExpectation.params) {
			mmExec.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmExec.defaultExpectation.params)
		}
	}

	return mmExec
}

// Inspect accepts an inspector function that has same arguments as the IQueryEngine.Exec
func (mmExec *mIQueryEngineMockExec) Inspect(f func(ctx context.Context, sql string, arguments ...interface{})) *mIQueryEngineMockExec {
	if mmExec.mock.inspectFuncExec != nil {
		mmExec.mock.t.Fatalf("Inspect function is already set for IQueryEngineMock.Exec")
	}

	mmExec.mock.inspectFuncExec = f

	return mmExec
}

// Return sets up results that will be returned by IQueryEngine.Exec
func (mmExec *mIQueryEngineMockExec) Return(c2 pgconn.CommandTag, err error) *IQueryEngineMock {
	if mmExec.mock.funcExec != nil {
		mmExec.mock.t.Fatalf("IQueryEngineMock.Exec mock is already set by Set")
	}

	if mmExec.defaultExpectation == nil {
		mmExec.defaultExpectation = &IQueryEngineMockExecExpectation{mock: mmExec.mock}
	}
	mmExec.defaultExpectation.results = &IQueryEngineMockExecResults{c2, err}
	return mmExec.mock
}

// Set uses given function f to mock the IQueryEngine.Exec method
func (mmExec *mIQueryEngineMockExec) Set(f func(ctx context.Context, sql string, arguments ...interface{}) (c2 pgconn.CommandTag, err error)) *IQueryEngineMock {
	if mmExec.defaultExpectation != nil {
		mmExec.mock.t.Fatalf("Default expectation is already set for the IQueryEngine.Exec method")
	}

	if len(mmExec.expectations) > 0 {
		mmExec.mock.t.Fatalf("Some expectations are already set for the IQueryEngine.Exec method")
	}

	mmExec.mock.funcExec = f
	return mmExec.mock
}

// When sets expectation for the IQueryEngine.Exec which will trigger the result defined by the following
// Then helper
func (mmExec *mIQueryEngineMockExec) When(ctx context.Context, sql string, arguments ...interface{}) *IQueryEngineMockExecExpectation {
	if mmExec.mock.funcExec != nil {
		mmExec.mock.t.Fatalf("IQueryEngineMock.Exec mock is already set by Set")
	}

	expectation := &IQueryEngineMockExecExpectation{
		mock:   mmExec.mock,
		params: &IQueryEngineMockExecParams{ctx, sql, arguments},
	}
	mmExec.expectations = append(mmExec.expectations, expectation)
	return expectation
}

// Then sets up IQueryEngine.Exec return parameters for the expectation previously defined by the When method
func (e *IQueryEngineMockExecExpectation) Then(c2 pgconn.CommandTag, err error) *IQueryEngineMock {
	e.results = &IQueryEngineMockExecResults{c2, err}
	return e.mock
}

// Exec implements transactor.IQueryEngine
func (mmExec *IQueryEngineMock) Exec(ctx context.Context, sql string, arguments ...interface{}) (c2 pgconn.CommandTag, err error) {
	mm_atomic.AddUint64(&mmExec.beforeExecCounter, 1)
	defer mm_atomic.AddUint64(&mmExec.afterExecCounter, 1)

	if mmExec.inspectFuncExec != nil {
		mmExec.inspectFuncExec(ctx, sql, arguments...)
	}

	mm_params := &IQueryEngineMockExecParams{ctx, sql, arguments}

	// Record call args
	mmExec.ExecMock.mutex.Lock()
	mmExec.ExecMock.callArgs = append(mmExec.ExecMock.callArgs, mm_params)
	mmExec.ExecMock.mutex.Unlock()

	for _, e := range mmExec.ExecMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.c2, e.results.err
		}
	}

	if mmExec.ExecMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmExec.ExecMock.defaultExpectation.Counter, 1)
		mm_want := mmExec.ExecMock.defaultExpectation.params
		mm_got := IQueryEngineMockExecParams{ctx, sql, arguments}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmExec.t.Errorf("IQueryEngineMock.Exec got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmExec.ExecMock.defaultExpectation.results
		if mm_results == nil {
			mmExec.t.Fatal("No results are set for the IQueryEngineMock.Exec")
		}
		return (*mm_results).c2, (*mm_results).err
	}
	if mmExec.funcExec != nil {
		return mmExec.funcExec(ctx, sql, arguments...)
	}
	mmExec.t.Fatalf("Unexpected call to IQueryEngineMock.Exec. %v %v %v", ctx, sql, arguments)
	return
}

// ExecAfterCounter returns a count of finished IQueryEngineMock.Exec invocations
func (mmExec *IQueryEngineMock) ExecAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmExec.afterExecCounter)
}

// ExecBeforeCounter returns a count of IQueryEngineMock.Exec invocations
func (mmExec *IQueryEngineMock) ExecBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmExec.beforeExecCounter)
}

// Calls returns a list of arguments used in each call to IQueryEngineMock.Exec.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmExec *mIQueryEngineMockExec) Calls() []*IQueryEngineMockExecParams {
	mmExec.mutex.RLock()

	argCopy := make([]*IQueryEngineMockExecParams, len(mmExec.callArgs))
	copy(argCopy, mmExec.callArgs)

	mmExec.mutex.RUnlock()

	return argCopy
}

// MinimockExecDone returns true if the count of the Exec invocations corresponds
// the number of defined expectations
func (m *IQueryEngineMock) MinimockExecDone() bool {
	for _, e := range m.ExecMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ExecMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterExecCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcExec != nil && mm_atomic.LoadUint64(&m.afterExecCounter) < 1 {
		return false
	}
	return true
}

// MinimockExecInspect logs each unmet expectation
func (m *IQueryEngineMock) MinimockExecInspect() {
	for _, e := range m.ExecMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to IQueryEngineMock.Exec with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ExecMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterExecCounter) < 1 {
		if m.ExecMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to IQueryEngineMock.Exec")
		} else {
			m.t.Errorf("Expected call to IQueryEngineMock.Exec with params: %#v", *m.ExecMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcExec != nil && mm_atomic.LoadUint64(&m.afterExecCounter) < 1 {
		m.t.Error("Expected call to IQueryEngineMock.Exec")
	}
}

type mIQueryEngineMockQuery struct {
	mock               *IQueryEngineMock
	defaultExpectation *IQueryEngineMockQueryExpectation
	expectations       []*IQueryEngineMockQueryExpectation

	callArgs []*IQueryEngineMockQueryParams
	mutex    sync.RWMutex
}

// IQueryEngineMockQueryExpectation specifies expectation struct of the IQueryEngine.Query
type IQueryEngineMockQueryExpectation struct {
	mock    *IQueryEngineMock
	params  *IQueryEngineMockQueryParams
	results *IQueryEngineMockQueryResults
	Counter uint64
}

// IQueryEngineMockQueryParams contains parameters of the IQueryEngine.Query
type IQueryEngineMockQueryParams struct {
	ctx   context.Context
	query string
	args  []interface{}
}

// IQueryEngineMockQueryResults contains results of the IQueryEngine.Query
type IQueryEngineMockQueryResults struct {
	r1  pgx.Rows
	err error
}

// Expect sets up expected params for IQueryEngine.Query
func (mmQuery *mIQueryEngineMockQuery) Expect(ctx context.Context, query string, args ...interface{}) *mIQueryEngineMockQuery {
	if mmQuery.mock.funcQuery != nil {
		mmQuery.mock.t.Fatalf("IQueryEngineMock.Query mock is already set by Set")
	}

	if mmQuery.defaultExpectation == nil {
		mmQuery.defaultExpectation = &IQueryEngineMockQueryExpectation{}
	}

	mmQuery.defaultExpectation.params = &IQueryEngineMockQueryParams{ctx, query, args}
	for _, e := range mmQuery.expectations {
		if minimock.Equal(e.params, mmQuery.defaultExpectation.params) {
			mmQuery.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmQuery.defaultExpectation.params)
		}
	}

	return mmQuery
}

// Inspect accepts an inspector function that has same arguments as the IQueryEngine.Query
func (mmQuery *mIQueryEngineMockQuery) Inspect(f func(ctx context.Context, query string, args ...interface{})) *mIQueryEngineMockQuery {
	if mmQuery.mock.inspectFuncQuery != nil {
		mmQuery.mock.t.Fatalf("Inspect function is already set for IQueryEngineMock.Query")
	}

	mmQuery.mock.inspectFuncQuery = f

	return mmQuery
}

// Return sets up results that will be returned by IQueryEngine.Query
func (mmQuery *mIQueryEngineMockQuery) Return(r1 pgx.Rows, err error) *IQueryEngineMock {
	if mmQuery.mock.funcQuery != nil {
		mmQuery.mock.t.Fatalf("IQueryEngineMock.Query mock is already set by Set")
	}

	if mmQuery.defaultExpectation == nil {
		mmQuery.defaultExpectation = &IQueryEngineMockQueryExpectation{mock: mmQuery.mock}
	}
	mmQuery.defaultExpectation.results = &IQueryEngineMockQueryResults{r1, err}
	return mmQuery.mock
}

// Set uses given function f to mock the IQueryEngine.Query method
func (mmQuery *mIQueryEngineMockQuery) Set(f func(ctx context.Context, query string, args ...interface{}) (r1 pgx.Rows, err error)) *IQueryEngineMock {
	if mmQuery.defaultExpectation != nil {
		mmQuery.mock.t.Fatalf("Default expectation is already set for the IQueryEngine.Query method")
	}

	if len(mmQuery.expectations) > 0 {
		mmQuery.mock.t.Fatalf("Some expectations are already set for the IQueryEngine.Query method")
	}

	mmQuery.mock.funcQuery = f
	return mmQuery.mock
}

// When sets expectation for the IQueryEngine.Query which will trigger the result defined by the following
// Then helper
func (mmQuery *mIQueryEngineMockQuery) When(ctx context.Context, query string, args ...interface{}) *IQueryEngineMockQueryExpectation {
	if mmQuery.mock.funcQuery != nil {
		mmQuery.mock.t.Fatalf("IQueryEngineMock.Query mock is already set by Set")
	}

	expectation := &IQueryEngineMockQueryExpectation{
		mock:   mmQuery.mock,
		params: &IQueryEngineMockQueryParams{ctx, query, args},
	}
	mmQuery.expectations = append(mmQuery.expectations, expectation)
	return expectation
}

// Then sets up IQueryEngine.Query return parameters for the expectation previously defined by the When method
func (e *IQueryEngineMockQueryExpectation) Then(r1 pgx.Rows, err error) *IQueryEngineMock {
	e.results = &IQueryEngineMockQueryResults{r1, err}
	return e.mock
}

// Query implements transactor.IQueryEngine
func (mmQuery *IQueryEngineMock) Query(ctx context.Context, query string, args ...interface{}) (r1 pgx.Rows, err error) {
	mm_atomic.AddUint64(&mmQuery.beforeQueryCounter, 1)
	defer mm_atomic.AddUint64(&mmQuery.afterQueryCounter, 1)

	if mmQuery.inspectFuncQuery != nil {
		mmQuery.inspectFuncQuery(ctx, query, args...)
	}

	mm_params := &IQueryEngineMockQueryParams{ctx, query, args}

	// Record call args
	mmQuery.QueryMock.mutex.Lock()
	mmQuery.QueryMock.callArgs = append(mmQuery.QueryMock.callArgs, mm_params)
	mmQuery.QueryMock.mutex.Unlock()

	for _, e := range mmQuery.QueryMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.r1, e.results.err
		}
	}

	if mmQuery.QueryMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmQuery.QueryMock.defaultExpectation.Counter, 1)
		mm_want := mmQuery.QueryMock.defaultExpectation.params
		mm_got := IQueryEngineMockQueryParams{ctx, query, args}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmQuery.t.Errorf("IQueryEngineMock.Query got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmQuery.QueryMock.defaultExpectation.results
		if mm_results == nil {
			mmQuery.t.Fatal("No results are set for the IQueryEngineMock.Query")
		}
		return (*mm_results).r1, (*mm_results).err
	}
	if mmQuery.funcQuery != nil {
		return mmQuery.funcQuery(ctx, query, args...)
	}
	mmQuery.t.Fatalf("Unexpected call to IQueryEngineMock.Query. %v %v %v", ctx, query, args)
	return
}

// QueryAfterCounter returns a count of finished IQueryEngineMock.Query invocations
func (mmQuery *IQueryEngineMock) QueryAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmQuery.afterQueryCounter)
}

// QueryBeforeCounter returns a count of IQueryEngineMock.Query invocations
func (mmQuery *IQueryEngineMock) QueryBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmQuery.beforeQueryCounter)
}

// Calls returns a list of arguments used in each call to IQueryEngineMock.Query.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmQuery *mIQueryEngineMockQuery) Calls() []*IQueryEngineMockQueryParams {
	mmQuery.mutex.RLock()

	argCopy := make([]*IQueryEngineMockQueryParams, len(mmQuery.callArgs))
	copy(argCopy, mmQuery.callArgs)

	mmQuery.mutex.RUnlock()

	return argCopy
}

// MinimockQueryDone returns true if the count of the Query invocations corresponds
// the number of defined expectations
func (m *IQueryEngineMock) MinimockQueryDone() bool {
	for _, e := range m.QueryMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.QueryMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterQueryCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcQuery != nil && mm_atomic.LoadUint64(&m.afterQueryCounter) < 1 {
		return false
	}
	return true
}

// MinimockQueryInspect logs each unmet expectation
func (m *IQueryEngineMock) MinimockQueryInspect() {
	for _, e := range m.QueryMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to IQueryEngineMock.Query with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.QueryMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterQueryCounter) < 1 {
		if m.QueryMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to IQueryEngineMock.Query")
		} else {
			m.t.Errorf("Expected call to IQueryEngineMock.Query with params: %#v", *m.QueryMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcQuery != nil && mm_atomic.LoadUint64(&m.afterQueryCounter) < 1 {
		m.t.Error("Expected call to IQueryEngineMock.Query")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *IQueryEngineMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockBeginTxInspect()

		m.MinimockExecInspect()

		m.MinimockQueryInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *IQueryEngineMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *IQueryEngineMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockBeginTxDone() &&
		m.MinimockExecDone() &&
		m.MinimockQueryDone()
}
